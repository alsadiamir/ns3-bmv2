# 1 "token-bucket.p4"
# 1 "<built-in>"
# 1 "<command-line>"
# 1 "token-bucket.p4"
/* -*- P4_16 -*- */
# 1 "/usr/share/p4c/p4include/core.p4" 1
/*
Copyright 2013-present Barefoot Networks, Inc.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

/* This is the P4-16 core library, which declares some built-in P4 constructs using P4 */




/// Standard error codes.  New error codes can be declared by users.
error {
    NoError, /// No error.
    PacketTooShort, /// Not enough bits in packet for 'extract'.
    NoMatch, /// 'select' expression has no matches.
    StackOutOfBounds, /// Reference to invalid element of a header stack.
    HeaderTooShort, /// Extracting too many bits into a varbit field.
    ParserTimeout, /// Parser execution time limit exceeded.
    ParserInvalidArgument /// Parser operation was called with a value
                           /// not supported by the implementation.
}

extern packet_in {
    /// Read a header from the packet into a fixed-sized header @hdr and advance the cursor.
    /// May trigger error PacketTooShort or StackOutOfBounds.
    /// @T must be a fixed-size header type
    void extract<T>(out T hdr);
    /// Read bits from the packet into a variable-sized header @variableSizeHeader
    /// and advance the cursor.
    /// @T must be a header containing exactly 1 varbit field.
    /// May trigger errors PacketTooShort, StackOutOfBounds, or HeaderTooShort.
    void extract<T>(out T variableSizeHeader,
                    in bit<32> variableFieldSizeInBits);
    /// Read bits from the packet without advancing the cursor.
    /// @returns: the bits read from the packet.
    /// T may be an arbitrary fixed-size type.
    T lookahead<T>();
    /// Advance the packet cursor by the specified number of bits.
    void advance(in bit<32> sizeInBits);
    /// @return packet length in bytes.  This method may be unavailable on
    /// some target architectures.
    bit<32> length();
}

extern packet_out {
    /// Write @hdr into the output packet, advancing cursor.
    /// @T can be a header type, a header stack, a header_union, or a struct
    /// containing fields with such types.
    void emit<T>(in T hdr);
}

// TODO: remove from this file, convert to built-in
/// Check a predicate @check in the parser; if the predicate is true do nothing,
/// otherwise set the parser error to @toSignal, and transition to the `reject` state.
extern void verify(in bool check, in error toSignal);

/// Built-in action that does nothing.
@noWarn("unused")
action NoAction() {}

/// Standard match kinds for table key fields.
/// Some architectures may not support all these match kinds.
/// Architectures can declare additional match kinds.
match_kind {
    /// Match bits exactly.
    exact,
    /// Ternary match, using a mask.
    ternary,
    /// Longest-prefix match.
    lpm
}
# 3 "token-bucket.p4" 2
# 1 "simple_pipe.p4" 1
/*
Copyright 2013-present Barefoot Networks, Inc.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

/* P4-16 declaration of the P4 simple pipe */




# 1 "/usr/share/p4c/p4include/core.p4" 1
/*
Copyright 2013-present Barefoot Networks, Inc.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

/* This is the P4-16 core library, which declares some built-in P4 constructs using P4 */
# 23 "simple_pipe.p4" 2

match_kind {
    range,
    // Used for implementing dynamic_action_selection
    selector
}

@metadata @name("standard_metadata")
struct standard_metadata_t {
    //
    // Inputs
    //
    /* qdepth:
     * The instantaneous size of the queue. Note that this is
     * not measured in bytes. Here is the equation that converts
     * qdepth_bytes to qdepth:
     *     qdepth = qdepth_bytes/maxSizeBytes * (2^qsizeBits - 1)
     * Where maxSizeBytes is the maximum size of the queue in bytes,
     * and qsizeBits is the number of bits that are used to represent
     * size (both queue and packet). qsizeBits is a configurable
     * parameter for the p4-queue-disc module in ns3-bmv2.
     */
    bit<32> qdepth;
    /* qdepth_bytes:
     * The instantaneous size of the queue in bytes.
     */
    bit<32> qdepth_bytes;
    /* avg_qdepth:
     * The EWMA of the queue size. Computed using the same technique
     * as the RED queue disc implementation. Again, note that this is
     * not measured in bytes, but rather is mapped into an integer in
     * the range [0, 2^qsizeBits - 1]. See the description of the qdepth
     * field for an equation to convert bytes to an integer in this range.
     */
    bit<32> avg_qdepth;
    /* avg_qdepth_bytes:
     * The EWMA of the queue size in bytes.
     */
    bit<32> avg_qdepth_bytes;
    /* timestamp:
     * The time that the packet arrived, measured in nanoseconds.
     */
    bit<64> timestamp;
    /* idle_time:
     * The time when the queue last went empty, measured in nanoseconds.
     */
    bit<64> idle_time;
    /* qlatency:
     * The latest queue latency measurement. Determined by computing the
     * difference between the enqueue and dequeue timestamps for each
     * packet. Measured in nanoseconds.
     */
    bit<64> qlatency;
    /* avg_deq_rate_bytes:
     * The average queue service rate, measured in bytes/sec.
     */
    bit<32> avg_deq_rate_bytes;
    /* pkt_len:
     * The length of the packet. Note that this is not measured in bytes.
     * The packet length is transformed into an integer in the range
     * [0, 2^qsizeBits - 1] so that it is directly comparable to the 
     * qdepth and avg_qdepth fields.
     */
    bit<32> pkt_len;
    /* pkt_len_bytes:
     * Length of the packet in bytes.
     */
    bit<32> pkt_len_bytes;
    /* l3_proto:
     * The L3 protocol number (IPv4, IPv6, etc.)
     */
    bit<16> l3_proto;
    /* flow_hash:
     * A hash of identifying packet fields, e.g. the 5-tuple. Can be used
     * to identify flows.
     */
    bit<32> flow_hash;
    /* ingress_trigger:
     * Indicates that this is an ingress packet.
     */
    bit<1> ingress_trigger;
    /* timer_trigger:
     * Indicates that this packet was generated by a timer event.
     */
    bit<1> timer_trigger;
    //
    // Drop trigger metadata
    //
    /* drop_trigger:
     * Indicates that a drop event has occured and the drop metadata fields
     * have been populated.
     */
    bit<1> drop_trigger;
    /* drop_timestamp:
     * Timstamp (in ns) indicating when the drop event occured.
     */
    bit<64> drop_timestamp;
    /* drop_qdepth:
     * Instantaneous size of the queue when the packet was dropped.
     * Units are the same as the qdepth field above.
     */
    bit<32> drop_qdepth;
    /* drop_qdepth_bytes:
     * Instantaneous size of the queue (in bytes) when the packet was
     * dropped.
     */
    bit<32> drop_qdepth_bytes;
    /* drop_avg_qdepth:
     * EWMA of the qdepth when the packet was dropped. Units are the
     * same as the avg_qdepth field above.
     */
    bit<32> drop_avg_qdepth;
    /* drop_avg_qdepth_bytes:
     * EWMA of the qdepth (in bytes) when the packet was dropped.
     */
    bit<32> drop_avg_qdepth_bytes;
    /* drop_pkt_len:
     * Length of the dropped packet. Units are the same as the pkt_len
     * field above.
     */
    bit<32> drop_pkt_len;
    /* drop_pkt_len_bytes:
     * Length of the dropped packet (in bytes).
     */
    bit<32> drop_pkt_len_bytes;
    /* drop_l3_proto:
     * L3 protocol number of the dropped packet.
     */
    bit<16> drop_l3_proto;
    /* drop_flow_hash:
     * A hash of identifying packet fields, e.g. the 5-tuple, in the dropped
     * packet. Can be used to identify flows.
     */
    bit<32> drop_flow_hash;
    //
    // Enqueue trigger metadata
    //
    /* enq_trigger:
     * Indicates that an enqueue event has occured and the enqueue metadata fields
     * have been populated.
     */
    bit<1> enq_trigger;
    /* enq_timestamp:
     * Timstamp (in ns) indicating when the enqueue event occured.
     */
    bit<64> enq_timestamp;
    /* enq_qdepth:
     * Instantaneous size of the queue when the packet was enqueued.
     * Units are the same as the qdepth field above.
     */
    bit<32> enq_qdepth;
    /* enq_qdepth_bytes:
     * Instantaneous size of the queue (in bytes) when the packet was
     * enqueued.
     */
    bit<32> enq_qdepth_bytes;
    /* enq_avg_qdepth:
     * EWMA of the qdepth when the packet was enqueued. Units are the
     * same as the avg_qdepth field above.
     */
    bit<32> enq_avg_qdepth;
    /* enq_avg_qdepth_bytes:
     * EWMA of the qdepth (in bytes) when the packet was enqueued.
     */
    bit<32> enq_avg_qdepth_bytes;
    /* enq_pkt_len:
     * Length of the enqueued packet. Units are the same as the pkt_len
     * field above.
     */
    bit<32> enq_pkt_len;
    /* enq_pkt_len_bytes:
     * Length of the enqueued packet (in bytes).
     */
    bit<32> enq_pkt_len_bytes;
    /* enq_l3_proto:
     * L3 protocol number of the enqueued packet.
     */
    bit<16> enq_l3_proto;
    /* enq_flow_hash:
     * A hash of identifying packet fields, e.g. the 5-tuple, in the enqueued
     * packet. Can be used to identify flows.
     */
    bit<32> enq_flow_hash;
    //
    // Dequeue trigger metadata
    //
    /* deq_trigger:
     * Indicates that a dequeue event has occured and the dequeue metadata
     * has been populated.
     */
    bit<1> deq_trigger;
    /* deq_enq_timestamp:
     * Timestamp indicating when the dequeued packet was enqueued.
     */
    bit<64> deq_enq_timestamp;
    /* deq_qdepth:
     * Instantaneous size of the queue when the packet was dequeued.
     * Units are the same as the qdepth field above.
     */
    bit<32> deq_qdepth;
    /* deq_qdepth_bytes:
     * Instantaneous size of the queue (in bytes) when the packet was
     * dequeued.
     */
    bit<32> deq_qdepth_bytes;
    /* deq_avg_qdepth:
     * EWMA of the qdepth when the packet was dequeued. Units are the
     * same as the avg_qdepth field above.
     */
    bit<32> deq_avg_qdepth;
    /* deq_avg_qdepth_bytes:
     * EWMA of the qdepth (in bytes) when the packet was dequeued.
     */
    bit<32> deq_avg_qdepth_bytes;
    /* deq_timestamp:
     * Timstamp (in ns) indicating when packet was dequeued.
     */
    bit<64> deq_timestamp;
    /* deq_pkt_len:
     * Length of the dequeued packet. Units are the same as the pkt_len
     * field above.
     */
    bit<32> deq_pkt_len;
    /* deq_pkt_len_bytes:
     * Length of the dequeued packet (in bytes).
     */
    bit<32> deq_pkt_len_bytes;
    /* deq_l3_proto:
     * L3 protocol number of the dequeued packet.
     */
    bit<16> deq_l3_proto;
    /* deq_flow_hash:
     * A hash of identifying packet fields, e.g. the 5-tuple, in the dequeued
     * packet. Can be used to identify flows.
     */
    bit<32> deq_flow_hash;
    //
    // Outputs
    //
    /* drop:
     * If set then p4-queue-disc will drop the packet.
     */
    bit<1> drop;
    /* mark:
     * If set then p4-queue-disc will mark the packet (e.g. set ECN bit).
     */
    bit<1> mark;
    //
    // Inputs / Outputs
    //
    /* tarce_vars:
     * These are intended to be used for debugging purposes. The p4-queue-disc
     * has attached trace sources to these fields so that NS3 user scripts
     * can attach trace sinks to them can hence can track all changes made to
     * them. 
     */
    bit<32> trace_var1;
    bit<32> trace_var2;
    bit<32> trace_var3;
    bit<32> trace_var4;

    /// Error produced by parsing
    error parser_error;
}

enum CounterType {
    packets,
    bytes,
    packets_and_bytes
}

enum MeterType {
    packets,
    bytes
}

extern counter {
    counter(bit<32> size, CounterType type);
    void count(in bit<32> index);
}

extern direct_counter {
    direct_counter(CounterType type);
    void count();
}

extern meter {
    meter(bit<32> size, MeterType type);
    void execute_meter<T>(in bit<32> index, out T result);
}

extern direct_meter<T> {
    direct_meter(MeterType type);
    void read(out T result);
}

extern register<T> {
    register(bit<32> size);
    void read(out T result, in bit<32> index);
    void write(in bit<32> index, in T value);
}

// used as table implementation attribute
extern action_profile {
    action_profile(bit<32> size);
}

// Get a random number in the range lo..hi
extern void random<T>(out T result, in T lo, in T hi);
// If the type T is a named struct, the name is used
// to generate the control-plane API.
extern void digest<T>(in bit<32> receiver, in T data);

enum HashAlgorithm {
    crc32,
    crc32_custom,
    crc16,
    crc16_custom,
    random,
    identity,
    csum16,
    xor16
}

extern void mark_to_drop();
extern void hash<O, T, D, M>(out O result, in HashAlgorithm algo, in T base, in D data, in M max);

extern action_selector {
    action_selector(HashAlgorithm algorithm, bit<32> size, bit<32> outputWidth);
}

enum CloneType {
    I2E,
    E2E
}

@deprecated("Please use verify_checksum/update_checksum instead.")
extern Checksum16 {
    Checksum16();
    bit<16> get<D>(in D data);
}

/**
Verifies the checksum of the supplied data.
If this method detects that a checksum of the data is not correct it
sets the standard_metadata checksum_error bit.
@param T          Must be a tuple type where all the fields are bit-fields or varbits.
                  The total dynamic length of the fields is a multiple of the output size.
@param O          Checksum type; must be bit<X> type.
@param condition  If 'false' the verification always succeeds.
@param data       Data whose checksum is verified.
@param checksum   Expected checksum of the data; note that is must be a left-value.
@param algo       Algorithm to use for checksum (not all algorithms may be supported).
                  Must be a compile-time constant.
*/
extern void verify_checksum<T, O>(in bool condition, in T data, inout O checksum, HashAlgorithm algo);
/**
Computes the checksum of the supplied data.
@param T          Must be a tuple type where all the fields are bit-fields or varbits.
                  The total dynamic length of the fields is a multiple of the output size.
@param O          Output type; must be bit<X> type.
@param condition  If 'false' the checksum is not changed
@param data       Data whose checksum is computed.
@param checksum   Checksum of the data.
@param algo       Algorithm to use for checksum (not all algorithms may be supported).
                  Must be a compile-time constant.
*/
extern void update_checksum<T, O>(in bool condition, in T data, inout O checksum, HashAlgorithm algo);

/**
Verifies the checksum of the supplied data including the payload.
The payload is defined as "all bytes of the packet which were not parsed by the parser".
If this method detects that a checksum of the data is not correct it
sets the standard_metadata checksum_error bit.
@param T          Must be a tuple type where all the fields are bit-fields or varbits.
                  The total dynamic length of the fields is a multiple of the output size.
@param O          Checksum type; must be bit<X> type.
@param condition  If 'false' the verification always succeeds.
@param data       Data whose checksum is verified.
@param checksum   Expected checksum of the data; note that is must be a left-value.
@param algo       Algorithm to use for checksum (not all algorithms may be supported).
                  Must be a compile-time constant.
*/
extern void verify_checksum_with_payload<T, O>(in bool condition, in T data, inout O checksum, HashAlgorithm algo);
/**
Computes the checksum of the supplied data including the payload.
The payload is defined as "all bytes of the packet which were not parsed by the parser".
@param T          Must be a tuple type where all the fields are bit-fields or varbits.
                  The total dynamic length of the fields is a multiple of the output size.
@param O          Output type; must be bit<X> type.
@param condition  If 'false' the checksum is not changed
@param data       Data whose checksum is computed.
@param checksum   Checksum of the data.
@param algo       Algorithm to use for checksum (not all algorithms may be supported).
                  Must be a compile-time constant.
*/
extern void update_checksum_with_payload<T, O>(in bool condition, in T data, inout O checksum, HashAlgorithm algo);

extern void resubmit<T>(in T data);
extern void recirculate<T>(in T data);
extern void clone(in CloneType type, in bit<32> session);
extern void clone3<T>(in CloneType type, in bit<32> session, in T data);

extern void truncate(in bit<32> length);

// The name 'standard_metadata' is reserved

// Architecture.
// M should be a struct of structs
// H should be a struct of headers or stacks

parser Parser<H, M>(packet_in b,
                    out H parsedHdr,
                    inout M meta,
                    inout standard_metadata_t standard_metadata);

/* The only legal statements in the implementation of the
VerifyChecksum control are: block statements, calls to the
verify_checksum and verify_checksum_with_payload methods,
and return statements. */
control VerifyChecksum<H, M>(inout H hdr,
                             inout M meta);
@pipeline
control Ingress<H, M>(inout H hdr,
                      inout M meta,
                      inout standard_metadata_t standard_metadata);
@pipeline
control Egress<H, M>(inout H hdr,
                     inout M meta,
                     inout standard_metadata_t standard_metadata);

/* The only legal statements in the implementation of the
ComputeChecksum control are: block statements, calls to the
update_checksum and update_checksum_with_payload methods,
and return statements. */
control ComputeChecksum<H, M>(inout H hdr,
                              inout M meta);
@deparser
control Deparser<H>(packet_out b, in H hdr);

package V1Switch<H, M>(Parser<H, M> p,
                       VerifyChecksum<H, M> vr,
                       Ingress<H, M> ig,
                       Egress<H, M> eg,
                       ComputeChecksum<H, M> ck,
                       Deparser<H> dep
                       );
# 4 "token-bucket.p4" 2

/*
 * Implements a simple token bucket using the periodic time
 * reference feature.
 */

typedef bit<32> uint_t;

// time reference = 1ms
// FILL_RATE = 125 bytes/ms = 1Mbps
const uint_t FILL_RATE = 125; // bytes / slot
const uint_t MAX_TOKENS = 1000; // two 500B packets

/*************************************************************************
*********************** H E A D E R S  ***********************************
*************************************************************************/

struct metadata {
    /* empty */
}

struct headers {
    /* empty */
}

/*************************************************************************
*********************** P A R S E R  ***********************************
*************************************************************************/

parser MyParser(packet_in packet,
                out headers hdr,
                inout metadata meta,
                inout standard_metadata_t standard_metadata) {

    state start {
        transition accept;
    }

}

/*************************************************************************
************   C H E C K S U M    V E R I F I C A T I O N   *************
*************************************************************************/

control MyVerifyChecksum(inout headers hdr, inout metadata meta) {
    apply { }
}


/*************************************************************************
**************  I N G R E S S   P R O C E S S I N G   *******************
*************************************************************************/

control token_bucket(in bit<1> timer_trigger, // set deterministically every PERIOD
                     in uint_t request, // number of requested tokens
                     out bool result)
{
    // externs
    register<uint_t>(1) tokens_reg;

    // metadata
    uint_t tokens;

    apply {
        @atomic {
            tokens_reg.read(tokens, 0);
            if (timer_trigger == 1) {
                // timer event (deterministically every PERIOD)
                tokens = tokens + FILL_RATE;
                if (tokens > MAX_TOKENS) {
                    tokens = MAX_TOKENS;
                }
                result = true;
            }
            else {
                // legit packet arrival
                if (tokens > request) {
                    result = true;
                    tokens = tokens - request;
                }
                else {
                    result = false;
                }
            }
            tokens_reg.write(0, tokens);
        }
    }
}

control MyIngress(inout headers hdr,
                  inout metadata meta,
                  inout standard_metadata_t standard_metadata) {

    token_bucket() tb;

    apply {
        uint_t request = standard_metadata.pkt_len_bytes;
        bool result;

        tb.apply(standard_metadata.timer_trigger, request, result);

        if (result == false) {
            standard_metadata.drop = 1;
        }

    }
}

/*************************************************************************
****************  E G R E S S   P R O C E S S I N G   *******************
*************************************************************************/

control MyEgress(inout headers hdr,
                 inout metadata meta,
                 inout standard_metadata_t standard_metadata) {
    apply { }
}

/*************************************************************************
*************   C H E C K S U M    C O M P U T A T I O N   **************
*************************************************************************/

control MyComputeChecksum(inout headers hdr, inout metadata meta) {
     apply { }
}

/*************************************************************************
***********************  D E P A R S E R  *******************************
*************************************************************************/

control MyDeparser(packet_out packet, in headers hdr) {
    apply { }
}

/*************************************************************************
***********************  S W I T C H  *******************************
*************************************************************************/

V1Switch(
MyParser(),
MyVerifyChecksum(),
MyIngress(),
MyEgress(),
MyComputeChecksum(),
MyDeparser()
) main;
