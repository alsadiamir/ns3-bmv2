/* -*- Mode:C++; c-file-style:"gnu"; indent-tabs-mode:nil; -*- */
/*
 * Copyright (c) 2018 Stanford University
 *
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License version 2 as
 * published by the Free Software Foundation;
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
 *
 * Author: Stephen Ibanez <sibanez@stanford.edu>
 */

#ifndef V1MODELP4_QUEUE_H
#define V1MODELP4_QUEUE_H

// #include "ns3/queue-disc.h"
// #include "ns3/nstime.h"
#include "ns3/packet.h"
#include "ns3/queue.h"
#include "ns3/simulator.h"
#include "ns3/v1model-p4-pipeline.h"
#include <array>
#include <string>

namespace ns3 {


/**
 * \ingroup traffic-control
 *
 * The P4 qdisc is configured by a P4 program. It contains qdisc classes
 * which actually perform the queueing and scheduling. This qdisc is
 * intended to be the root qdisc that simply runs the user's P4 program
 * and then passes the modified packet to the appropriate qdisc class
 * (or drops the packet if the P4 program says to do so).
 */
  class V1ModelP4Queue : public Queue<Packet>
  {
  public:
    static TypeId GetTypeId (void);
    V1ModelP4Queue ();
    virtual ~V1ModelP4Queue ();
    /// Get the JSON source file
    std::string GetJsonFile (void) const;

    /// Set the JSON source file
    void SetJsonFile (std::string jsonFile);

    /// Get the CLI commands file 
    std::string GetCommandsFile (void) const;

    /// Set the CLI commands file
    void SetCommandsFile (std::string commandsFile);

    virtual bool Enqueue (Ptr<Packet> packet) override
    {
      std_meta_t std_meta;
      // std::cout << "V1ModelP4Queue::Enqueue called with packet of size: " << packet->GetSize () << std::endl;
      // std::cout << packet->ToString () << std::endl;
      // std_meta.ingress_global_timestamp = Simulator::Now ().GetMicroSeconds ();
      Ptr<Packet> new_packet = m_p4Pipe->process_pipeline(packet, std_meta, 0, 0);
      if(std_meta.egress_spec == 511) {
        std::cout << "Dropped packet!" << std::endl;
        return false;
      }
      return DoEnqueue (Tail (), new_packet);
    }
    virtual Ptr<Packet> Dequeue (void) override
    {
      Ptr<Packet> packet = DoDequeue (Head ());
      // NS_LOG_INFO ("V1ModelP4Queue::Dequeue called with packet of size: " << packet->GetSize ());
      return packet;
    }
    virtual Ptr<const Packet> Peek (void) const override
    {
      return DoPeek (Head ());
    }
    virtual Ptr<Packet> Remove (void) override
    {
      Ptr<Packet> packet = DoRemove (Head ());
      // NS_LOG_INFO ("V1ModelP4Queue::Remove called with packet of size: " << packet->GetSize ());
      return packet;
    }
    void CreateP4Pipe(std::string m_jsonFile, std::string m_commandsFile) 
    {
      // NS_LOG_INFO ("Initializing P4 Queue Disc params.");

      V1ModelP4Pipe *p4Pipe = new V1ModelP4Pipe(m_jsonFile);
      p4Pipe->run_cli (m_commandsFile);
      m_p4Pipe = p4Pipe;
    }
    private:
      using Queue<Packet>::Head;
      using Queue<Packet>::Tail;
      using Queue<Packet>::DoEnqueue;
      using Queue<Packet>::DoDequeue;
      using Queue<Packet>::DoRemove;
      using Queue<Packet>::DoPeek;
      V1ModelP4Pipe *m_p4Pipe;            //!< The P4 pipeline
      std::string m_jsonFile;      //!< The bmv2 JSON file (generated by the p4c-bm backend)
      std::string m_commandsFile;  //!< The CLI commands file
  };
}

#endif /* V1MODELP4_QUEUE_H */