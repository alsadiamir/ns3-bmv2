/* -*- Mode:C++; c-file-style:"gnu"; indent-tabs-mode:nil; -*- */
/*
 * Copyright (c) 2018 Stanford University
 *
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License version 2 as
 * published by the Free Software Foundation;
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
 *
 * Author: Stephen Ibanez <sibanez@stanford.edu>
 */

#ifndef P4_QUEUE_DISC_H
#define P4_QUEUE_DISC_H

#include "ns3/queue-disc.h"
#include "ns3/nstime.h"
#include "ns3/data-rate.h"
#include "ns3/v1model-p4-pipeline.h"
#include <array>
#include <string>

namespace ns3 {


/**
 * \ingroup traffic-control
 *
 * The P4 qdisc is configured by a P4 program. It contains qdisc classes
 * which actually perform the queueing and scheduling. This qdisc is
 * intended to be the root qdisc that simply runs the user's P4 program
 * and then passes the modified packet to the appropriate qdisc class
 * (or drops the packet if the P4 program says to do so).
 */
class V1ModelP4QueueDisc : public QueueDisc {
public:
  /**
   * \brief Get the type ID.
   * \return the object TypeId
   */
  static TypeId GetTypeId (void);
  /**
   * \brief V1ModelP4QueueDisc constructor
   */
  V1ModelP4QueueDisc ();

  virtual ~V1ModelP4QueueDisc();

  /// Get the JSON source file
  std::string GetJsonFile (void) const;

  /// Set the JSON source file
  void SetJsonFile (std::string jsonFile);

  /// Get the CLI commands file 
  std::string GetCommandsFile (void) const;

  /// Set the CLI commands file
  void SetCommandsFile (std::string commandsFile);

  static constexpr const char* P4_DROP = "P4 drop";      //!< P4 program said to drop packet before enqueue

private:
  virtual bool DoEnqueue (Ptr<QueueDiscItem> item);
  virtual Ptr<QueueDiscItem> DoDequeue (void);
  virtual Ptr<const QueueDiscItem> DoPeek (void);
  virtual bool CheckConfig (void);
  void InspectPacket (Ptr<Packet> packet);

  /**
   * \brief Initialize \param std_meta with default values
   */
  void InitStdMeta (std_meta_t &std_meta);

  /**
   * \brief The function to execute when a timer event is triggered
   */

  /**
   * \brief The function to execute when a drop before enqueue event occurs
   */
  void RunDropEvent (Ptr<const QueueDiscItem> item);

  /**
   * \brief Initialize the queue disc parameters.
   *
   * Note: if the link bandwidth changes in the course of the
   * simulation, the bandwidth-dependent parameters do not change.
   * This should be fixed, but it would require some extra parameters,
   * and didn't seem worth the trouble...
   */
  virtual void InitializeParams (void);
  /**
   * \brief Compute the average queue size
   * \param nQueued number of queued packets
   * \param m simulated number of packets arrival during idle period
   * \param qAvg average queue size
   * \param qW queue weight given to cur q size sample
   * \returns new average queue size
   */

  static const uint64_t DQCOUNT_INVALID = std::numeric_limits<uint64_t>::max(); //!< Invalid dqCount value

  // ** Variables supplied by user 
  std::string m_jsonFile;      //!< The bmv2 JSON file (generated by the p4c-bm backend)
  std::string m_commandsFile;  //!< The CLI commands file
  bool m_enDropEvents;         //!< Enable drop event triggers in P4 pipeline
  bool m_enEnqEvents;          //!< Enable enqueue event triggers in P4 pipeline
  bool m_enDeqEvents;          //!< Enable dequeue event triggers in P4 pipeline

  static Ptr<Packet> default_packet; //!< default packet to use for timer events

  // ** Variables maintained by the queue disc
  V1ModelP4Pipe *m_p4Pipe;            //!< The P4 pipeline

};

} // namespace ns3

#endif /* P4_QUEUE_DISC_H */